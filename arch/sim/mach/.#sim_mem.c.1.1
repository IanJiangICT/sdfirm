#include "mach.h"
#include <target/heap.h>

caddr_t heap;

#define PORTING_HEAP_LOOP		64
#define PORTING_HEAP_UNIT		(CONFIG_HEAP_SIZE / PORTING_HEAP_LOOP)

void heap_test1(void)
{
	heap_size_t heap_space = PORTING_HEAP_UNIT;
	caddr_t mem1, mem2;
	caddr_t g_mem[4];

	while (1) {
		g_mem[0] = heap_alloc(heap_space);
		g_mem[1] = heap_alloc(heap_space);
		g_mem[2] = heap_alloc(heap_space);
		g_mem[3] = heap_alloc(heap_space);
		if (g_mem[0]) heap_free(g_mem[0]);
		if (g_mem[2]) heap_free(g_mem[2]);

		mem1 = heap_alloc(heap_space);
		mem2 = heap_alloc(heap_space);
		if (mem1) {
			BUG_ON((mem1 != g_mem[0]) && (mem1 != g_mem[2]));
			heap_free(mem1);
		}
		if (mem2) {
			BUG_ON((mem2 != g_mem[0]) && (mem2 != g_mem[2]));
			heap_free(mem2);
		}

		if (g_mem[1]) heap_free(g_mem[1]);
		if (g_mem[3]) heap_free(g_mem[3]);

		heap_space += PORTING_HEAP_UNIT;
		if (heap_space >= CONFIG_HEAP_SIZE ||
		    heap_space == 0)
			break;
	}
}

heap_size_t porting_heap_space = PORTING_HEAP_UNIT;

void heap_test(void)
{
	caddr_t mem1, mem2;

	while (1) {
		mem1 = heap_alloc(porting_heap_space);
		mem2 = heap_alloc(porting_heap_space);
		printf("Alloc L1: %08x at %08x %s\r\n",
		       porting_heap_space, mem1, mem1 ? "" : "*");
		printf("Alloc L2: %08x at %08x %s\r\n",
		       porting_heap_space, mem2, mem2 ? "" : "*");
		if (mem1) heap_free(mem1);
		if (mem2) heap_free(mem2);

		porting_heap_space += PORTING_HEAP_UNIT;
		if (porting_heap_space >= CONFIG_HEAP_SIZE ||
		    porting_heap_space == 0)
			porting_heap_space = PORTING_HEAP_UNIT;
	}
}

void heap_test2(void)
{
	uint8_t i;
	caddr_t g_mem[64*2];

	for (i = 1; i < 64; i++) {
		g_mem[(i-1) * 2] = heap_alloc((heap_size_t)(2*i));
		g_mem[(i-1) * 2 + 1] = heap_alloc((heap_size_t)(2*i));
	}
	for (i = 1; i < 64; i++) {
		heap_free(g_mem[(i-1) * 2]);
	}
}

void sim_mem_post_heap(void)
{
	heap_test1();
	heap_test2();
}

void sim_mem_init(void)
{
	heap = (caddr_t)calloc(1, CONFIG_HEAP_SIZE+HEAP_ALIGN);
	heap_range_init(heap);
}
