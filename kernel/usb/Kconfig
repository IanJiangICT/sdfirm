#
# USB Bus Interfaces
#

config ARCH_HAS_USB
	bool

config ARCH_HAS_USB_DEV
	bool
	select ARCH_HAS_USB

config ARCH_HAS_USB_HCD
	bool
	select ARCH_HAS_USB

config ARCH_HAS_USB_OTG
	bool
	select ARCH_HAS_USB

config ARCH_IS_USBD_ENDP_TXCMPL
	bool
	select USBD_XFR_ASYNC_TXAVAL

config ARCH_IS_USBD_ENDP_DUPLEX
	bool

config ARCH_HAS_USBD_ENDP_CSO
	bool

menuconfig USB
	bool "Universal serial bus (USB) support"
	select TIMER if !SYS_NOIRQ
	select BIT_FFS16

if USB

config USB_DEV
	bool "USB device controller (USBD) support"
	depends ARCH_HAS_USB_DEV || ARCH_HAS_USB_OTG
	select USBD_XFR_ASYNC if !USBD_XFR_SYNC
	select USBD_XFR_ADAPT if (USBD_XFR_SYNC && USBD_XFR_ASYNC)

config USB_HCD
	bool "USB host controller (HCD) support"
	depends ARCH_HAS_USB_HCD || ARCH_HAS_USB_OTG

config USB_OTG
	bool "USB On-The-Go (OTG) support"
	depends USB_DEV && USB_HCD && ARCH_HAS_USB_OTG

config USBD_ENDP_DUPLEX
	bool "Enable duplex endpoints support"
	depends ARCH_IS_USBD_ENDP_DUPLEX && EXPERIMENTAL
	default y

config USBD_DETACH
	bool "Enable bus detach support"
	depends ARCH_HAS_USBD_DETACH

config USBD_XFR_MASS
	bool "Enable massive transfer support"
	depends USB_DEV

config USBD_XFR_ADAPT
	bool "Enable adaptive device transfer support"
	depends USBD_XFR_SYNC
	depends USBD_XFR_ASYNC

config USBD_XFR_ASYNC
	bool "Enable asynchronous device transfer support"

config USBD_XFR_SYNC
	bool "Enable synchronous device transfer support"
	help
	  This enables tuned USB requests handling codes between the
	  usbd_request_set_sync and the usbd_request_clear_sync to work as
	  synchronous transfers.
	  Note that this is not always safe. There are situations that an
	  asynchronous STALL or SETUP token may be received by the USB
	  device controller when a transfer is running.  The USB device
	  controller driver may choose not to handle these events
	  correctly in usbd_hw_transfer_open/usbd_hw_transfer_close for
	  synchronous support as it's very difficult to stop current
	  running synchronous transfers through these implementations.

config USBD_BULK
	bool "Enable bulk transfer support"

config USBD_XFR_ASYNC_TXAVAL
	bool "Enable asynchronous TXAVAL emulation support"
	default n
	help
	  This is required for controllers with TXCMPL edge triggered
	  IRQs, but controllers with TXAVAL level triggered IRQs are safe
	  to enable this to emulate itself as a controller with TXCMPL
	  IRQs.  Note asynchronous task context transfer IO calls then can
	  not be disabled in this way, which might result in worse
	  performance on the controllers with TXAVAL IRQs.
	  If you are not sure, say N here.

config USBD_MAX_INTFS
	int "Number of interfaces (1~3)"
	range 1 3
	depends USB_DEV
	default 1
	help
	  Currently, we only support 3 kind of interfaces:
	    HID: Human interface device
	    MSD: Mass storage device
	    CCID: Curcuit card interface device
	  Since interface drivers can be disabled, you can also reduce
	  number of interfaces here to save memory.
	  If you are not sure, say 1 here.

source kernel/usb/scd/Kconfig
source kernel/usb/msd/Kconfig
source kernel/usb/hid/Kconfig

menuconfig USB_DFU
	bool "Device firmware upgrade (DFU) support"
	select CRC32

if USB_DFU

choice
	prompt "DFU protocol"
	help
	  You can only compile one protocol at a time.  The DFU mode
	  firmware should be put into the boot section in your hardware
	  while the runtime firmware could be put with the other interface
	  classes to form a USB composite device.

config DFU_RUNTIME
	bool "Runtime"

config DFU_DFUMODE
	bool "DFU mode"
	depends SYS_NOIRQ
	help
	  Since DFU interface has only one control endpoint which does not
	  require interval polling mechanism, it is safe to force USB
	  device stack running without timer support.

config DFU_FULLCMD
	bool "Full command set"

endchoice

config DFU_AUTO_RESET
	bool "Automatically reset after detach/manifestation"
	default y

endif

menuconfig USB_PN53X
	bool "NXP PN53X NFC device support"
	select PN53X

if USB_PN53X

endif

endif
